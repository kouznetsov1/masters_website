[{"/home/daniel/Documents/Projects/masters_website/client/src/index.js":"1","/home/daniel/Documents/Projects/masters_website/client/src/atoms.js":"2","/home/daniel/Documents/Projects/masters_website/client/src/pages/PageHeader.js":"3","/home/daniel/Documents/Projects/masters_website/client/src/pages/table/TableFilter.js":"4","/home/daniel/Documents/Projects/masters_website/client/src/pages/table/CourseTable.js":"5","/home/daniel/Documents/Projects/masters_website/client/src/pages/table/Checkbox.js":"6","/home/daniel/Documents/Projects/masters_website/client/src/pages/functions/CourseSetter.js":"7","/home/daniel/Documents/Projects/masters_website/client/src/pages/chosen/ChosenCourses.js":"8","/home/daniel/Documents/Projects/masters_website/client/src/pages/table/MainPage.js":"9","/home/daniel/Documents/Projects/masters_website/client/src/pages/chosen/ChosenCoursePage.js":"10"},{"size":702,"mtime":1656858465702,"results":"11","hashOfConfig":"12"},{"size":592,"mtime":1656249397379,"results":"13","hashOfConfig":"12"},{"size":641,"mtime":1657042681886,"results":"14","hashOfConfig":"12"},{"size":6270,"mtime":1656960779737,"results":"15","hashOfConfig":"12"},{"size":6464,"mtime":1656959655649,"results":"16","hashOfConfig":"12"},{"size":2689,"mtime":1655640054394,"results":"17","hashOfConfig":"12"},{"size":1982,"mtime":1656249531521,"results":"18","hashOfConfig":"12"},{"size":148,"mtime":1655632531011,"results":"19","hashOfConfig":"12"},{"size":338,"mtime":1656858465702,"results":"20","hashOfConfig":"12"},{"size":131,"mtime":1655638717759,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1uqf03w",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/home/daniel/Documents/Projects/masters_website/client/src/index.js",[],["47","48"],"/home/daniel/Documents/Projects/masters_website/client/src/atoms.js",[],"/home/daniel/Documents/Projects/masters_website/client/src/pages/PageHeader.js",[],"/home/daniel/Documents/Projects/masters_website/client/src/pages/table/TableFilter.js",["49","50","51"],"import axios from \"axios\";\nimport React, { useEffect, useLayoutEffect, useState } from \"react\";\nimport { useRecoilState, useSetRecoilState, useRecoilValue } from \"recoil\";\nimport \"./css/TableFilter.css\";\nimport {\n  nonHandledCourses as coursesToHandleAtom,\n  courses as handledCoursesAtom,\n  areas as allAreasAtom,\n  areaFilter as areaFilterAtom,\n  examinationFilter as examinationFilterAtom,\n  chosenProgram as chosenProgramAtom,\n} from \"../../atoms\";\nimport { setCourses } from \"../functions/CourseSetter\";\nimport cloneDeep from \"lodash/cloneDeep\";\n\nclass TableFilter extends React.Component {\n  render() {\n    return (\n      <div className=\"stickyPane\">\n        <div className=\"filterBoxes\">\n          <ProgramFilter />\n          <AreaFilter />\n          <PrecisionFilter />\n          <PrecisionFilter />\n        </div>\n      </div>\n    );\n  }\n}\n\n// #TODO:\n// extend api and database to show other programs courses\nfunction ProgramFilter() {\n  const [currentProgram, setProgramAtom] = useRecoilState(chosenProgramAtom);\n  const [coursesToHandle, setNonHandledCourses] = useRecoilState(\n    coursesToHandleAtom\n  );\n  const setHandledCourses = useSetRecoilState(handledCoursesAtom);\n  const setAllAreas = useSetRecoilState(allAreasAtom);\n\n  const [courses, areas] = setCourses(coursesToHandle);\n\n  useEffect(() => {\n    // setNonHandledCourses are for courses with duplicates,\n    // courses in different areas, periods etc.\n    axios.get(\"http://localhost:5000/courses\").then((res) => {\n      setNonHandledCourses(res.data);\n    });\n    // Handled courses are without duplicates\n    setHandledCourses(courses);\n    setAllAreas(areas);\n  }, [currentProgram]);\n\n  const setProgram = (program) => {\n    setProgramAtom(program);\n    console.log(currentProgram);\n  };\n\n  var programs = {\n    D: \"Datateknik\",\n    DPU: \"Design- & produktutveckling\",\n    ED: \"Elektronikdesign\",\n    EMM: \"Energi - miljö - management\",\n    I: \"Industriell Ekonomi\",\n    IT: \"Informationsteknologi\",\n    KB: \"Kemisk biologi\",\n    KTS: \"Kommunikation, transport och samhälle\",\n    M: \"Maskinteknik\",\n    MED: \"Medicinsk teknisk\",\n    MT: \"Medieteknik\",\n    U: \"Mjukvaruteknik\",\n    TBI: \"Teknisk Biologi\",\n    Y: \"Teknisk fysik och elektroteknik\",\n  };\n\n  return (\n    <div className=\"filterBox\">\n      <h3>Program</h3>\n      <div className=\"overflow-auto\">\n        <div class=\"col-4\">\n          <div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n            {Object.entries(programs).map(([code, program]) => (\n              <a\n                class=\"list-group-item list-group-item-action\"\n                program={code}\n                id=\"list-home-list\"\n                data-toggle=\"list\"\n                href=\"#list-home\"\n                role=\"tab\"\n                aria-controls=\"home\"\n                onClick={(e) =>\n                  setProgram(e.target.attributes.program.nodeValue)\n                }\n              >\n                {program}\n              </a>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction AreaFilter() {\n  const areas = cloneDeep(useRecoilValue(allAreasAtom));\n  const setAreaFilter = useSetRecoilState(areaFilterAtom);\n\n  for (var i = 0; i < areas.length; i++) {\n    if (areas[i] === \"\") {\n      areas.splice(i, 1);\n    }\n  }\n\n  function onCheckboxClick(area, value) {\n    // delete from areafilter\n    if (value) {\n      setAreaFilter((areaFilter) => areaFilter.filter((item) => item !== area));\n    }\n    // add to areafilter\n    else {\n      setAreaFilter((areaFilter) =>\n        areaFilter.find((item) => item === area) ? area : [...areaFilter, area]\n      );\n    }\n  }\n\n  return (\n    <div className=\"filterBox\">\n      <h3>Profil</h3>\n      <div className=\"overflow-auto\">\n        <div class=\"col-4\">\n          <div\n            class=\"list-group\"\n            id=\"list-tab\"\n            role=\"tablist\"\n            style={{ backgroundColor: \"white\" }}\n          >\n            {areas.map((area) => {\n              return (\n                <div class=\"form-check\" style={{ margin: \"5px\" }}>\n                  <input\n                    class=\"form-check-input\"\n                    type=\"checkbox\"\n                    id=\"flexCheckDefault\"\n                    defaultChecked\n                    onClick={(e) => {\n                      onCheckboxClick(area, e.target.checked);\n                    }}\n                  />\n                  <label class=\"form-check-label\" for=\"flexCheckDefault\">\n                    {area}\n                  </label>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction PrecisionFilter() {\n  const setExaminationFilter = useSetRecoilState(examinationFilterAtom);\n\n  var examinations = [\"TEN\", \"LAB\", \"UPG\", \"KTR\", \"HEM\", \"BAS\", \"PRA\"];\n\n  function onCheckboxClick(examination, value) {\n    // delete from examinationfilter\n    if (value) {\n      setExaminationFilter((examinationFilter) =>\n        examinationFilter.filter((item) => item !== examination)\n      );\n    }\n    // add to examinationfilter\n    else {\n      setExaminationFilter((examinationFilter) =>\n        examinationFilter.find((item) => item === examination)\n          ? examination\n          : [...examinationFilter, examination]\n      );\n    }\n  }\n\n  return (\n    <div className=\"filterBox\">\n      <h3>Examinationsmoment</h3>\n      <div className=\"overflow-auto\">\n        <div class=\"col-4\">\n          <div\n            class=\"list-group\"\n            id=\"list-tab\"\n            role=\"tablist\"\n            style={{ backgroundColor: \"white\" }}\n          >\n            {examinations.map((examination) => (\n              <div class=\"form-check\" style={{ margin: \"5px\" }}>\n                <input\n                  class=\"form-check-input\"\n                  type=\"checkbox\"\n                  id=\"flexCheckDefault\"\n                  onClick={(e) => {\n                    onCheckboxClick(examination, e.target.checked);\n                  }}\n                  defaultChecked\n                />\n                <label class=\"form-check-label\" for=\"flexCheckChecked\">\n                  {examination}\n                </label>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TableFilter;\n","/home/daniel/Documents/Projects/masters_website/client/src/pages/table/CourseTable.js",["52","53"],"import React, { useEffect, useState } from \"react\";\nimport \"./css/CourseTable.css\";\nimport Checkbox from \"./Checkbox.js\";\nimport { useRecoilValue } from \"recoil\";\nimport {\n  courses as coursesAtom,\n  areas as allAreasAtom,\n  areaFilter as areaFilterAtom,\n  examinationFilter as examinationFilterAtom,\n} from \"../../atoms\";\n\nconst CourseTable = () => {\n  const courses = useRecoilValue(coursesAtom);\n  const areas = useRecoilValue(allAreasAtom);\n  const filteredAreas = useRecoilValue(areaFilterAtom);\n  const examinationFilter = useRecoilValue(examinationFilterAtom);\n\n  return (\n    <div className=\"bigFullAssTable\">\n      {Semester(courses, areas, filteredAreas, examinationFilter)}\n    </div>\n  );\n};\n\nconst Semester = (courses, areas, filteredAreas, examinationFilter) => {\n  var semester = 7;\n  var renderedSemesters = [];\n\n  do {\n    renderedSemesters.push(\n      <div id=\"accordion\" className=\"full-table\">\n        <div className=\"card\">\n          <div className=\"card-header\" id={\"semester_\" + semester}>\n            <h2 className=\"mb-0\">\n              <button\n                className=\"btn btn-link btn-block text-left\"\n                data-toggle=\"collapse\"\n                data-target={\"#collapse\" + semester}\n                aria-expanded=\"true\"\n                aria-controls={\"collapseOne\" + semester}\n                type=\"button\"\n              >\n                Termin {semester}\n              </button>\n            </h2>\n          </div>\n\n          <div\n            id={\"collapse\" + semester}\n            className=\"collapse show\"\n            aria-labelledby={\"semester_\" + semester}\n            data-parent=\"#accordion\"\n          >\n            <div className=\"card-body\">\n              {Areas(\n                semester,\n                courses,\n                areas,\n                filteredAreas,\n                examinationFilter\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n    semester++;\n  } while (semester <= 9);\n  return <div>{renderedSemesters}</div>;\n};\n\nconst Areas = (semester, courses, areas, filteredAreas, examinationFilter) => {\n  var renderedAreas = [];\n\n  for (let i = 0; i < areas.length; i++) {\n    const area = areas[i];\n    if (area !== \"\" && !filteredAreas.includes(area)) {\n      renderedAreas.push(\n        <div className={\"semester\"}>\n          <h3 className=\"area-header\">{area}</h3>\n          {Period(semester, area, courses, filteredAreas, examinationFilter)}\n        </div>\n      );\n    } else if (area === \"\") {\n      renderedAreas.push(\n        <div className={\"semester\"}>\n          {Period(semester, area, courses, filteredAreas, examinationFilter)}\n        </div>\n      );\n    }\n  }\n  return <div>{renderedAreas}</div>;\n};\n\nconst Period = (semester, area, courses, filteredAreas, examinationFilter) => {\n  var period = 1;\n  var renderedPeriods = [];\n\n  do {\n    renderedPeriods.push(\n      <div className=\"periods\">\n        <div className={\"period_\" + period}>\n          <h5>Period {period}</h5>\n          {Course(\n            semester,\n            area,\n            period,\n            courses,\n            filteredAreas,\n            examinationFilter\n          )}\n        </div>\n      </div>\n    );\n    period++;\n  } while (period <= 2);\n  return <div>{renderedPeriods}</div>;\n};\n\nconst Course = (\n  semester,\n  area,\n  period,\n  courses,\n  filteredAreas,\n  examinationFilter\n) => {\n  var renderedCourses = [];\n  var coursesToRender = [];\n\n  for (let i = 0; i < courses.name.length; i++) {\n    const course = courses.course[i];\n    const to_render = shallCourseRender(\n      semester,\n      period,\n      course,\n      filteredAreas,\n      examinationFilter\n    );\n\n    if (to_render && course.area.includes(area)) {\n      coursesToRender.push(course);\n    }\n  }\n\n  renderedCourses.push(\n    <table className=\"table table-sm\">\n      <thead>\n        <tr>\n          <th scope=\"col\">Check</th>\n          <th scope=\"col\">Kurskod</th>\n          <th scope=\"col\">Kurs</th>\n          <th scope=\"col\">Hp</th>\n          <th scope=\"col\">Nivå</th>\n          <th scope=\"col\">Block</th>\n          <th scope=\"col\">VOF</th>\n          <th scope=\"col\">TEN</th>\n          <th scope=\"col\">LAB</th>\n          <th scope=\"col\">PRA</th>\n          <th scope=\"col\">UPG</th>\n          <th scope=\"col\">KTR</th>\n          <th scope=\"col\">HEM</th>\n          <th scope=\"col\">BAS</th>\n        </tr>\n      </thead>\n      <tbody>\n        {coursesToRender.map((course) => (\n          <tr>\n            <Checkbox course={course} semester={semester} period={period} />\n            <td style={{ width: \"5em\" }}>\n              <a\n                href={\"http://www.google.com/search?q=\" + course.code + \"+liu\"}\n              >\n                {course.code}\n              </a>\n            </td>\n            <td style={{ width: \"40em\" }}>\n              <a href={course.url}>{course.name}</a>\n            </td>\n            <td style={{ width: \"4em\" }}>{course.points}</td>\n            <td style={{ width: \"4em\" }}>{course.level}</td>\n            <td style={{ width: \"5em\" }}>{course.block}</td>\n            <td style={{ width: \"4em\" }}>{course.vof}</td>\n            <td>{ExaminationObject(course.ten)}</td>\n            <td>{ExaminationObject(course.lab)}</td>\n            <td>{ExaminationObject(course.pra)}</td>\n            <td>{ExaminationObject(course.upg)}</td>\n            <td>{ExaminationObject(course.ktr)}</td>\n            <td>{ExaminationObject(course.hem)}</td>\n            <td>{ExaminationObject(course.bas)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n  return <div>{renderedCourses}</div>;\n};\n\nconst ExaminationObject = (examination) => {\n  if (examination === true) {\n    return \"X\";\n  }\n  return;\n};\n\nconst shallCourseRender = (\n  semester,\n  period,\n  course,\n  filteredAreas,\n  examinationFilter\n) => {\n  var dyn_values = course.dynamic_values;\n\n  //console.log(course)\n\n  // checks if course uses filtered examination type\n  const is_examination = () => {\n    for (let i = 0; i < examinationFilter.length; i++) {\n      var exam_type = examinationFilter[i].toLowerCase();\n      if (course[exam_type] === true) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  for (let i = 0; i < dyn_values.length; i++) {\n    if (\n      dyn_values[i].semester === semester &&\n      dyn_values[i].period === period &&\n      !is_examination() &&\n      !filteredAreas.includes(course.area)\n    ) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport default CourseTable;\n","/home/daniel/Documents/Projects/masters_website/client/src/pages/table/Checkbox.js",["54","55"],"import React, { useEffect, useState } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport {courses as coursesAtom} from \"../../atoms.js\";\nimport cloneDeep from \"lodash/cloneDeep\";\n\n\nconst Checkbox = (props) => {\n  const [courses, setCourses] = useRecoilState(coursesAtom);\n  const courseState = courses.course[props.course.id];\n  const [disabled, setDisabled] = useState(false);\n  const [checked, setChecked] = useState(false);\n\n  function handleCheckboxClick(semester, period) {\n    setCourses(originalState => {\n      // set new state\n      const newState = cloneDeep({ ...originalState });\n      const course = newState.course[props.course.id];\n\n      // set dynamic values and checked variable\n      if (course.checked === true) {\n        course.checked = false;\n        for (var i = 0; i < course.dynamic_values.length; i++){\n          if (course.dynamic_values[i].semester === semester && course.dynamic_values[i].period === period) {\n            course.dynamic_values[i].checked_here = false;\n          }\n        }\n      } else {\n        course.checked = true;\n        for (var i = 0; i < course.dynamic_values.length; i++){\n          if (course.dynamic_values[i].semester === semester && course.dynamic_values[i].period === period) {\n            course.dynamic_values[i].checked_here = true;\n          }\n        }\n      }\n\n      return newState;\n    });\n  }\n\n  useEffect(() => {\n    if (courseState.checked) {\n      var checked = false;\n      for (var i = 0; i < courseState.dynamic_values.length; i++){\n        if (courseState.dynamic_values[i].semester === props.semester && courseState.dynamic_values[i].period === props.period && courseState.dynamic_values[i].checked_here) {\n          checked = true;\n        }\n      }\n\n      if (!checked) {\n        setDisabled(true);\n      }\n\n      if (checked) {\n        setChecked(true);\n      }\n    }\n    else{\n      setDisabled(false);\n      setChecked(false);\n    }\n    // this is not effective, it \"changes\" all course objects, not just the one that is clicked\n  }, [courseState]);\n\n\n  if (disabled){\n    return (\n      <div className=\"mdc-checkbox\" \n      style={{ margin: \"auto\", width: \"35px\"}} >\n        <input type=\"checkbox\" \n        className=\"mdc-checkbox__native-control\" \n        id=\"checkbox-1\"\n        disabled\n        />\n      </div>\n    );\n  }\n  else {\n    return (\n      <div className=\"mdc-checkbox\" \n      style={{ width: \"15px\", margin: \"auto\", }}\n      onClick={() => handleCheckboxClick(props.semester, props.period)}>\n        <input type=\"checkbox\" \n        className=\"mdc-checkbox__native-control\" \n        id=\"checkbox-1\"\n        checked={checked}/>\n      </div>\n    );\n  }\n}\n\nexport default Checkbox;\n","/home/daniel/Documents/Projects/masters_website/client/src/pages/functions/CourseSetter.js",["56"],"import cloneDeep from \"lodash/cloneDeep\";\n\nexport function setCourses(nonHandledCourses) {\n  const courses_mount = cloneDeep(nonHandledCourses);\n  const all_areas = [];\n  const courses = {\n    name: [],\n    course: [],\n  };\n\n  var course_id = 0;\n  \n  for (let i = 0; i < courses_mount.length; i++) {\n    var course = courses_mount[i];\n\n    if (!all_areas.includes(course.area)) {\n      all_areas.push(course.area);\n    }\n\n    if (!courses.name.includes(course.name)) {\n      course = fixCourseDatatypes(course);\n      course.id = course_id;\n      course_id++;\n      courses.name.push(course.name);\n      courses.course.push(course);\n      course.checked = false;\n    } else {\n      var index = courses.name.indexOf(course.name);\n\n      if (!courses.course[index].area.includes(course.area)) {\n        courses.course[index].area.push(course.area);\n      }\n\n      var dynamic_values = courses.course[index].dynamic_values;\n      var dyn_values = setDynamicValues(course);\n\n      courses.course[index].dynamic_values.push(dyn_values);\n\n      var dyn_val_unique = courses.course[index].dynamic_values.reduce(\n        (unique, o) => {\n          if (\n            !unique.some(\n              (obj) =>\n                obj.semester === o.semester &&\n                obj.block === o.block &&\n                obj.period === o.period\n            )\n          ) {\n            unique.push(o);\n          }\n          return unique;\n        },\n        []\n      );\n      courses.course[index].dynamic_values = dyn_val_unique;\n    }\n  }\n  return [courses, all_areas];\n};\n\n\n\nfunction setDynamicValues(course) {\n  var dynamic_values = {\n    semester: course.semester,\n    block: course.block,\n    period: course.period,\n    checked_here: false,\n  };\n  return dynamic_values;\n}\n\n// variable needs to be of type array for the ones below\nfunction fixCourseDatatypes(course) {\n  course.dynamic_values = [setDynamicValues(course)];\n  course.area = [course.area];\n  return course;\n}\n\nexport default setCourses;","/home/daniel/Documents/Projects/masters_website/client/src/pages/chosen/ChosenCourses.js",[],"/home/daniel/Documents/Projects/masters_website/client/src/pages/table/MainPage.js",[],"/home/daniel/Documents/Projects/masters_website/client/src/pages/chosen/ChosenCoursePage.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":2,"column":28,"nodeType":"63","messageId":"64","endLine":2,"endColumn":43},{"ruleId":"61","severity":1,"message":"65","line":2,"column":45,"nodeType":"63","messageId":"64","endLine":2,"endColumn":53},{"ruleId":"66","severity":1,"message":"67","line":52,"column":6,"nodeType":"68","endLine":52,"endColumn":22,"suggestions":"69"},{"ruleId":"61","severity":1,"message":"70","line":1,"column":17,"nodeType":"63","messageId":"64","endLine":1,"endColumn":26},{"ruleId":"61","severity":1,"message":"65","line":1,"column":28,"nodeType":"63","messageId":"64","endLine":1,"endColumn":36},{"ruleId":"71","severity":1,"message":"72","line":29,"column":18,"nodeType":"63","messageId":"73","endLine":29,"endColumn":19},{"ruleId":"66","severity":1,"message":"74","line":62,"column":6,"nodeType":"68","endLine":62,"endColumn":19,"suggestions":"75"},{"ruleId":"61","severity":1,"message":"76","line":34,"column":11,"nodeType":"63","messageId":"64","endLine":34,"endColumn":25},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'useLayoutEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'areas', 'courses', 'setAllAreas', 'setHandledCourses', and 'setNonHandledCourses'. Either include them or remove the dependency array.","ArrayExpression",["79"],"'useEffect' is defined but never used.","no-redeclare","'i' is already defined.","redeclared","React Hook useEffect has missing dependencies: 'props.period' and 'props.semester'. Either include them or remove the dependency array.",["80"],"'dynamic_values' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},"Update the dependencies array to be: [areas, courses, currentProgram, setAllAreas, setHandledCourses, setNonHandledCourses]",{"range":"85","text":"86"},"Update the dependencies array to be: [courseState, props.period, props.semester]",{"range":"87","text":"88"},[1643,1659],"[areas, courses, currentProgram, setAllAreas, setHandledCourses, setNonHandledCourses]",[2030,2043],"[courseState, props.period, props.semester]"]