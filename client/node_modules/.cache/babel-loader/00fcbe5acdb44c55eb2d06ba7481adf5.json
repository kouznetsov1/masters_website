{"ast":null,"code":"var _jsxFileName = \"/home/daniel/Documents/Projects/masters_website/client/src/components/CourseTableTest.js\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./CourseTable.css\";\nimport axios from \"axios\";\nimport Checkbox from \"./Checkbox.js\";\nimport { configureStore } from '@reduxjs/toolkit';\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst CourseTableTest = () => {\n  const [all_areas, setAllAreas] = useState([]);\n  const [course, setCourses] = useState([]);\n  const [course_name, setCourseName] = useState([]);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    axios.get(\"http://localhost:5000/courses\").then(res => {\n      const courses_mount = res.data;\n\n      for (let i = 0; i < courses_mount.length; i++) {\n        var curr_course = courses_mount[i];\n\n        if (!all_areas.includes(curr_course.area)) {\n          all_areas.push(curr_course.area);\n        }\n\n        if (!course_name.includes(curr_course.name)) {\n          curr_course = fixCourseDatatypes(curr_course);\n          course_name.push(curr_course.name);\n          course.push(curr_course);\n          curr_course.strike_through = false;\n        } else {\n          var index = course_name.indexOf(curr_course.name);\n\n          if (!course[index].area.includes(curr_course.area)) {\n            course[index].area.push(curr_course.area);\n          }\n\n          var dynamic_values = course[index].dynamic_values;\n          var dyn_values = setDynamicValues(curr_course);\n          course[index].dynamic_values.push(dyn_values);\n          var dyn_val_unique = course[index].dynamic_values.reduce((unique, o) => {\n            if (!unique.some(obj => obj.semester === o.semester && obj.block === o.block && obj.period === o.period)) {\n              unique.push(o);\n            }\n\n            return unique;\n          }, []);\n          course[index].dynamic_values = dyn_val_unique;\n        }\n      }\n\n      console.log(course); //this.setState({ courses });\n      //this.setState({ all_areas });\n    });\n  });\n\n  function setDynamicValues(course) {\n    var dynamic_values = {\n      semester: course.semester,\n      block: course.block,\n      period: course.period,\n      checked_here: false\n    };\n    return dynamic_values;\n  } // variable needs to be of type array for the ones below\n\n\n  function fixCourseDatatypes(course) {\n    course.dynamic_values = [setDynamicValues(course)];\n    course.area = [course.area];\n    return course;\n  }\n\n  function semester() {\n    var semester = 7;\n    var renderedSemesters = [];\n\n    do {\n      renderedSemesters.push( /*#__PURE__*/React.createElement(\"div\", {\n        id: \"accordion\",\n        className: \"full-table\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-header\",\n        id: \"semester_\" + semester,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        className: \"mb-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"btn btn-link\",\n        \"data-toggle\": \"collapse\",\n        \"data-target\": \"#collapse\" + semester,\n        \"aria-expanded\": \"true\",\n        \"aria-controls\": \"collapseOne\" + semester,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }\n      }, \"Termin \", semester))), /*#__PURE__*/React.createElement(\"div\", {\n        id: \"collapse\" + semester,\n        className: \"collapse show\",\n        \"aria-labelledby\": \"semester_\" + semester,\n        \"data-parent\": \"#accordion\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-body\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 15\n        }\n      })))));\n      semester++;\n    } while (semester <= 9);\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 12\n      }\n    }, renderedSemesters);\n  }\n  /*\n    function areas(semester) {\n      var renderedAreas = [];\n  \n      for (let i = 0; i < this.state.all_areas.length; i++) {\n        const area = this.state.all_areas[i];\n        if (area !== \"\"){\n          renderedAreas.push(\n            <div className={\"semester\"}>\n              <h3 className=\"area-header\">{area}</h3>\n              {period(semester, area)}\n            </div>\n          );\n        }\n        else{\n          renderedAreas.push(\n            <div className={\"semester\"}>\n              {period(semester,area)}\n            </div>\n          )\n        }\n      }\n      return <div>{renderedAreas}</div>;\n    }\n  \n    function period(semester, area) {\n      var period = 1;\n      var renderedPeriods = [];\n  \n      do {\n        renderedPeriods.push(\n          <div className=\"periods\">\n            <div className={\"period_\" + period}>\n              <h5>Period {period}</h5>\n              {course(semester, area, period)}\n            </div>\n          </div>\n        );\n        period++;\n      } while (period <= 2);\n      return <div>{renderedPeriods}</div>;\n    }\n  \n    function course(semester, area, period) {\n      var renderedCourses = [];\n      var courses = this.state.courses;\n      var coursesToRender = [];\n  \n      for (let i = 0; i < courses.name.length; i++) {\n        const course = courses.course[i];\n        const to_render = shallCourseRender(\n          semester,\n          period,\n          course.dynamic_values\n        );\n  \n        if (to_render && course.area.includes(area)) {\n          coursesToRender.push(course);\n        }\n      }\n  \n      renderedCourses.push(\n        <table className=\"table table-sm\">\n          <thead>\n            <tr>\n              <th scope=\"col\">Check</th>\n              <th scope=\"col\">Kurskod</th>\n              <th scope=\"col\">Kurs</th>\n              <th scope=\"col\">Hp</th>\n              <th scope=\"col\">Niv√•</th>\n              <th scope=\"col\">Block</th>\n              <th scope=\"col\">VOF</th>\n              <th scope=\"col\">TEN</th>\n              <th scope=\"col\">LAB</th>\n              <th scope=\"col\">PRA</th>\n              <th scope=\"col\">UPG</th>\n              <th scope=\"col\">KTR</th>\n              <th scope=\"col\">HEM</th>\n              <th scope=\"col\">BAS</th>\n            </tr>\n          </thead>\n          <tbody>\n            {coursesToRender.map((course) => (\n              <tr>\n                <Checkbox course={course}\n                  semester={course.semester}\n                  period={course.period}\n                />\n                <td style={{width: \"5em\"}}>\n                  <a\n                    href={\n                      \"http://www.google.com/search?q=\" + course.code + \"+liu\"\n                    }\n                  >\n                    {course.code}\n                  </a>\n                </td>\n                <td style={{width: \"40em\"}}>\n                  <a href={course.url}>{course.name}</a>\n                </td>\n                <td style={{ width: \"4em\" }}>{course.points}</td>\n                <td style={{ width: \"4em\" }}>{course.level}</td>\n                <td style={{ width: \"5em\" }}>{course.block}</td>\n                <td style={{ width: \"4em\" }}>{course.vof}</td>\n                <td>{examinationObject(course.exam)}</td>\n                <td>{examinationObject(course.lab)}</td>\n                <td>{examinationObject(course.project)}</td>\n                <td>{examinationObject(course.upg)}</td>\n                <td>{examinationObject(course.ktr)}</td>\n                <td>{examinationObject(course.hem)}</td>\n                <td>{examinationObject(course.bas)}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      );\n      return <div>{renderedCourses}</div>;\n    }\n  \n    function checkBox(courseCode, isPressed) {\n      const [pressed, setPressed] = this.useState(\"option1\");\n  \n      if (isPressed) {\n        setPressed(\"option2\");\n      }\n  \n      console.log(\"hej\");\n    }\n  \n    function examinationObject(examination) {\n      if (examination === true){\n        return \"X\";\n      }\n      return;\n    }\n  \n    function shallCourseRender(semester, period, dyn_values) {\n      for (let i = 0; i < dyn_values.length; i++) {\n        if (\n          dyn_values[i].semester === semester &&\n          dyn_values[i].period === period\n        ) {\n          return true;\n        }\n      }\n      return false;\n    }*/\n\n\n  return semester();\n};\n\nexport default CourseTableTest;","map":{"version":3,"sources":["/home/daniel/Documents/Projects/masters_website/client/src/components/CourseTableTest.js"],"names":["React","useEffect","useState","axios","Checkbox","configureStore","useDispatch","useSelector","CourseTableTest","all_areas","setAllAreas","course","setCourses","course_name","setCourseName","dispatch","get","then","res","courses_mount","data","i","length","curr_course","includes","area","push","name","fixCourseDatatypes","strike_through","index","indexOf","dynamic_values","dyn_values","setDynamicValues","dyn_val_unique","reduce","unique","o","some","obj","semester","block","period","console","log","checked_here","renderedSemesters"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./CourseTable.css\";\nimport axios from \"axios\";\nimport Checkbox from \"./Checkbox.js\";\nimport {configureStore} from '@reduxjs/toolkit'\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst CourseTableTest = () => {\n  const [all_areas, setAllAreas] = useState([]);\n  const [course, setCourses] = useState([]);\n  const [course_name, setCourseName] = useState([]);\n  const dispatch = useDispatch();\n\n\n  useEffect(() => {\n    axios.get(\"http://localhost:5000/courses\").then((res) => {\n      const courses_mount = res.data;\n\n      for (let i = 0; i < courses_mount.length; i++) {\n        var curr_course = courses_mount[i];\n\n        if (!all_areas.includes(curr_course.area)) {\n          all_areas.push(curr_course.area);\n        }\n\n        if (!course_name.includes(curr_course.name)) {\n          curr_course = fixCourseDatatypes(curr_course);\n          course_name.push(curr_course.name);\n          course.push(curr_course);\n          curr_course.strike_through = false;\n        } \n        else {\n          var index = course_name.indexOf(curr_course.name);\n\n          if (!course[index].area.includes(curr_course.area)) {\n            course[index].area.push(curr_course.area);\n          }\n\n          var dynamic_values = course[index].dynamic_values;\n          var dyn_values = setDynamicValues(curr_course);\n\n          course[index].dynamic_values.push(dyn_values);\n\n          var dyn_val_unique = course[index].dynamic_values.reduce(\n            (unique, o) => {\n              if (\n                !unique.some(\n                  (obj) =>\n                    obj.semester === o.semester &&\n                    obj.block === o.block &&\n                    obj.period === o.period\n                )\n              ) {\n                unique.push(o);\n              }\n              return unique;\n            },\n            []\n          );\n          course[index].dynamic_values = dyn_val_unique;\n        }\n      }\n      console.log(course);\n      //this.setState({ courses });\n      //this.setState({ all_areas });\n    });\n  })\n\n  function setDynamicValues(course) {\n    var dynamic_values = {\n      semester: course.semester,\n      block: course.block,\n      period: course.period,\n      checked_here: false,\n    };\n    return dynamic_values;\n  }\n\n   // variable needs to be of type array for the ones below\n  function fixCourseDatatypes(course) {\n    course.dynamic_values = [setDynamicValues(course)];\n    course.area = [course.area];\n    return course;\n  }\n\n  function semester() {\n    var semester = 7;\n    var renderedSemesters = [];\n\n    do {\n      renderedSemesters.push(\n        <div id=\"accordion\" className=\"full-table\">\n          <div className=\"card\">\n            <div className=\"card-header\" id={\"semester_\" + semester}>\n              <h2 className=\"mb-0\">\n                <button\n                  className=\"btn btn-link\"\n                  data-toggle=\"collapse\"\n                  data-target={\"#collapse\" + semester}\n                  aria-expanded=\"true\"\n                  aria-controls={\"collapseOne\" + semester}\n                >\n                  Termin {semester}\n                </button>\n              </h2>\n            </div>\n\n            <div\n              id={\"collapse\" + semester}\n              className=\"collapse show\"\n              aria-labelledby={\"semester_\" + semester}\n              data-parent=\"#accordion\"\n            >\n              <div className=\"card-body\">{/*areas(semester)*/}</div>\n            </div>\n          </div>\n        </div>\n      );\n      semester++;\n    } while (semester <= 9);\n    return <div>{renderedSemesters}</div>;\n  }\n/*\n  function areas(semester) {\n    var renderedAreas = [];\n\n    for (let i = 0; i < this.state.all_areas.length; i++) {\n      const area = this.state.all_areas[i];\n      if (area !== \"\"){\n        renderedAreas.push(\n          <div className={\"semester\"}>\n            <h3 className=\"area-header\">{area}</h3>\n            {period(semester, area)}\n          </div>\n        );\n      }\n      else{\n        renderedAreas.push(\n          <div className={\"semester\"}>\n            {period(semester,area)}\n          </div>\n        )\n      }\n    }\n    return <div>{renderedAreas}</div>;\n  }\n\n  function period(semester, area) {\n    var period = 1;\n    var renderedPeriods = [];\n\n    do {\n      renderedPeriods.push(\n        <div className=\"periods\">\n          <div className={\"period_\" + period}>\n            <h5>Period {period}</h5>\n            {course(semester, area, period)}\n          </div>\n        </div>\n      );\n      period++;\n    } while (period <= 2);\n    return <div>{renderedPeriods}</div>;\n  }\n\n  function course(semester, area, period) {\n    var renderedCourses = [];\n    var courses = this.state.courses;\n    var coursesToRender = [];\n\n    for (let i = 0; i < courses.name.length; i++) {\n      const course = courses.course[i];\n      const to_render = shallCourseRender(\n        semester,\n        period,\n        course.dynamic_values\n      );\n\n      if (to_render && course.area.includes(area)) {\n        coursesToRender.push(course);\n      }\n    }\n\n    renderedCourses.push(\n      <table className=\"table table-sm\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Check</th>\n            <th scope=\"col\">Kurskod</th>\n            <th scope=\"col\">Kurs</th>\n            <th scope=\"col\">Hp</th>\n            <th scope=\"col\">Niv√•</th>\n            <th scope=\"col\">Block</th>\n            <th scope=\"col\">VOF</th>\n            <th scope=\"col\">TEN</th>\n            <th scope=\"col\">LAB</th>\n            <th scope=\"col\">PRA</th>\n            <th scope=\"col\">UPG</th>\n            <th scope=\"col\">KTR</th>\n            <th scope=\"col\">HEM</th>\n            <th scope=\"col\">BAS</th>\n          </tr>\n        </thead>\n        <tbody>\n          {coursesToRender.map((course) => (\n            <tr>\n              <Checkbox course={course}\n                semester={course.semester}\n                period={course.period}\n              />\n              <td style={{width: \"5em\"}}>\n                <a\n                  href={\n                    \"http://www.google.com/search?q=\" + course.code + \"+liu\"\n                  }\n                >\n                  {course.code}\n                </a>\n              </td>\n              <td style={{width: \"40em\"}}>\n                <a href={course.url}>{course.name}</a>\n              </td>\n              <td style={{ width: \"4em\" }}>{course.points}</td>\n              <td style={{ width: \"4em\" }}>{course.level}</td>\n              <td style={{ width: \"5em\" }}>{course.block}</td>\n              <td style={{ width: \"4em\" }}>{course.vof}</td>\n              <td>{examinationObject(course.exam)}</td>\n              <td>{examinationObject(course.lab)}</td>\n              <td>{examinationObject(course.project)}</td>\n              <td>{examinationObject(course.upg)}</td>\n              <td>{examinationObject(course.ktr)}</td>\n              <td>{examinationObject(course.hem)}</td>\n              <td>{examinationObject(course.bas)}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n    return <div>{renderedCourses}</div>;\n  }\n\n  function checkBox(courseCode, isPressed) {\n    const [pressed, setPressed] = this.useState(\"option1\");\n\n    if (isPressed) {\n      setPressed(\"option2\");\n    }\n\n    console.log(\"hej\");\n  }\n\n  function examinationObject(examination) {\n    if (examination === true){\n      return \"X\";\n    }\n    return;\n  }\n\n  function shallCourseRender(semester, period, dyn_values) {\n    for (let i = 0; i < dyn_values.length; i++) {\n      if (\n        dyn_values[i].semester === semester &&\n        dyn_values[i].period === period\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }*/\n\n  return semester();\n}\n\nexport default CourseTableTest;\n"]},"metadata":{},"sourceType":"module"}