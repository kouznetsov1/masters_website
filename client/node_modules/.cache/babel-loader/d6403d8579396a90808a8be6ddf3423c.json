{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends, __values } from \"tslib\";\nimport { getCorrectEventName } from '@material/animation/util';\nimport { MDCComponent } from '@material/base/component';\nimport { applyPassive } from '@material/dom/events';\nimport { matches } from '@material/dom/ponyfill';\nimport { MDCRipple } from '@material/ripple/component';\nimport { MDCRippleFoundation } from '@material/ripple/foundation';\nimport { strings } from './constants';\nimport { MDCCheckboxFoundation } from './foundation';\nvar CB_PROTO_PROPS = ['checked', 'indeterminate'];\n\nvar MDCCheckbox =\n/** @class */\nfunction (_super) {\n  __extends(MDCCheckbox, _super);\n\n  function MDCCheckbox() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.rippleSurface = _this.createRipple();\n    return _this;\n  }\n\n  MDCCheckbox.attachTo = function (root) {\n    return new MDCCheckbox(root);\n  };\n\n  Object.defineProperty(MDCCheckbox.prototype, \"ripple\", {\n    get: function () {\n      return this.rippleSurface;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCCheckbox.prototype, \"checked\", {\n    get: function () {\n      return this.getNativeControl().checked;\n    },\n    set: function (checked) {\n      this.getNativeControl().checked = checked;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCCheckbox.prototype, \"indeterminate\", {\n    get: function () {\n      return this.getNativeControl().indeterminate;\n    },\n    set: function (indeterminate) {\n      this.getNativeControl().indeterminate = indeterminate;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCCheckbox.prototype, \"disabled\", {\n    get: function () {\n      return this.getNativeControl().disabled;\n    },\n    set: function (disabled) {\n      this.foundation.setDisabled(disabled);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCCheckbox.prototype, \"value\", {\n    get: function () {\n      return this.getNativeControl().value;\n    },\n    set: function (value) {\n      this.getNativeControl().value = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MDCCheckbox.prototype.initialize = function () {\n    var DATA_INDETERMINATE_ATTR = strings.DATA_INDETERMINATE_ATTR;\n    this.getNativeControl().indeterminate = this.getNativeControl().getAttribute(DATA_INDETERMINATE_ATTR) === 'true';\n    this.getNativeControl().removeAttribute(DATA_INDETERMINATE_ATTR);\n  };\n\n  MDCCheckbox.prototype.initialSyncWithDOM = function () {\n    var _this = this;\n\n    this.handleChange = function () {\n      _this.foundation.handleChange();\n    };\n\n    this.handleAnimationEnd = function () {\n      _this.foundation.handleAnimationEnd();\n    };\n\n    this.getNativeControl().addEventListener('change', this.handleChange);\n    this.listen(getCorrectEventName(window, 'animationend'), this.handleAnimationEnd);\n    this.installPropertyChangeHooks();\n  };\n\n  MDCCheckbox.prototype.destroy = function () {\n    this.rippleSurface.destroy();\n    this.getNativeControl().removeEventListener('change', this.handleChange);\n    this.unlisten(getCorrectEventName(window, 'animationend'), this.handleAnimationEnd);\n    this.uninstallPropertyChangeHooks();\n\n    _super.prototype.destroy.call(this);\n  };\n\n  MDCCheckbox.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n\n\n    var adapter = {\n      addClass: function (className) {\n        return _this.root.classList.add(className);\n      },\n      forceLayout: function () {\n        return _this.root.offsetWidth;\n      },\n      hasNativeControl: function () {\n        return !!_this.getNativeControl();\n      },\n      isAttachedToDOM: function () {\n        return Boolean(_this.root.parentNode);\n      },\n      isChecked: function () {\n        return _this.checked;\n      },\n      isIndeterminate: function () {\n        return _this.indeterminate;\n      },\n      removeClass: function (className) {\n        _this.root.classList.remove(className);\n      },\n      removeNativeControlAttr: function (attr) {\n        _this.getNativeControl().removeAttribute(attr);\n      },\n      setNativeControlAttr: function (attr, value) {\n        _this.getNativeControl().setAttribute(attr, value);\n      },\n      setNativeControlDisabled: function (disabled) {\n        _this.getNativeControl().disabled = disabled;\n      }\n    };\n    return new MDCCheckboxFoundation(adapter);\n  };\n\n  MDCCheckbox.prototype.createRipple = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n\n\n    var adapter = __assign(__assign({}, MDCRipple.createAdapter(this)), {\n      deregisterInteractionHandler: function (evtType, handler) {\n        _this.getNativeControl().removeEventListener(evtType, handler, applyPassive());\n      },\n      isSurfaceActive: function () {\n        return matches(_this.getNativeControl(), ':active');\n      },\n      isUnbounded: function () {\n        return true;\n      },\n      registerInteractionHandler: function (evtType, handler) {\n        _this.getNativeControl().addEventListener(evtType, handler, applyPassive());\n      }\n    });\n\n    return new MDCRipple(this.root, new MDCRippleFoundation(adapter));\n  };\n\n  MDCCheckbox.prototype.installPropertyChangeHooks = function () {\n    var e_1, _a;\n\n    var _this = this;\n\n    var nativeCb = this.getNativeControl();\n    var cbProto = Object.getPrototypeOf(nativeCb);\n\n    var _loop_1 = function (controlState) {\n      var desc = Object.getOwnPropertyDescriptor(cbProto, controlState); // We have to check for this descriptor, since some browsers (Safari) don't support its return.\n      // See: https://bugs.webkit.org/show_bug.cgi?id=49739\n\n      if (!validDescriptor(desc)) {\n        return {\n          value: void 0\n        };\n      } // Type cast is needed for compatibility with Closure Compiler.\n\n\n      var nativeGetter = desc.get;\n      var nativeCbDesc = {\n        configurable: desc.configurable,\n        enumerable: desc.enumerable,\n        get: nativeGetter,\n        set: function (state) {\n          desc.set.call(nativeCb, state);\n\n          _this.foundation.handleChange();\n        }\n      };\n      Object.defineProperty(nativeCb, controlState, nativeCbDesc);\n    };\n\n    try {\n      for (var CB_PROTO_PROPS_1 = __values(CB_PROTO_PROPS), CB_PROTO_PROPS_1_1 = CB_PROTO_PROPS_1.next(); !CB_PROTO_PROPS_1_1.done; CB_PROTO_PROPS_1_1 = CB_PROTO_PROPS_1.next()) {\n        var controlState = CB_PROTO_PROPS_1_1.value;\n\n        var state_1 = _loop_1(controlState);\n\n        if (typeof state_1 === \"object\") return state_1.value;\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (CB_PROTO_PROPS_1_1 && !CB_PROTO_PROPS_1_1.done && (_a = CB_PROTO_PROPS_1.return)) _a.call(CB_PROTO_PROPS_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  MDCCheckbox.prototype.uninstallPropertyChangeHooks = function () {\n    var e_2, _a;\n\n    var nativeCb = this.getNativeControl();\n    var cbProto = Object.getPrototypeOf(nativeCb);\n\n    try {\n      for (var CB_PROTO_PROPS_2 = __values(CB_PROTO_PROPS), CB_PROTO_PROPS_2_1 = CB_PROTO_PROPS_2.next(); !CB_PROTO_PROPS_2_1.done; CB_PROTO_PROPS_2_1 = CB_PROTO_PROPS_2.next()) {\n        var controlState = CB_PROTO_PROPS_2_1.value;\n        var desc = Object.getOwnPropertyDescriptor(cbProto, controlState);\n\n        if (!validDescriptor(desc)) {\n          return;\n        }\n\n        Object.defineProperty(nativeCb, controlState, desc);\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (CB_PROTO_PROPS_2_1 && !CB_PROTO_PROPS_2_1.done && (_a = CB_PROTO_PROPS_2.return)) _a.call(CB_PROTO_PROPS_2);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  };\n\n  MDCCheckbox.prototype.getNativeControl = function () {\n    var NATIVE_CONTROL_SELECTOR = strings.NATIVE_CONTROL_SELECTOR;\n    var el = this.root.querySelector(NATIVE_CONTROL_SELECTOR);\n\n    if (!el) {\n      throw new Error(\"Checkbox component requires a \" + NATIVE_CONTROL_SELECTOR + \" element\");\n    }\n\n    return el;\n  };\n\n  return MDCCheckbox;\n}(MDCComponent);\n\nexport { MDCCheckbox };\n\nfunction validDescriptor(inputPropDesc) {\n  return !!inputPropDesc && typeof inputPropDesc.set === 'function';\n}","map":{"version":3,"sources":["component.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends, __values } from \"tslib\";\nimport { getCorrectEventName } from '@material/animation/util';\nimport { MDCComponent } from '@material/base/component';\nimport { applyPassive } from '@material/dom/events';\nimport { matches } from '@material/dom/ponyfill';\nimport { MDCRipple } from '@material/ripple/component';\nimport { MDCRippleFoundation } from '@material/ripple/foundation';\nimport { strings } from './constants';\nimport { MDCCheckboxFoundation } from './foundation';\nvar CB_PROTO_PROPS = ['checked', 'indeterminate'];\nvar MDCCheckbox = /** @class */ (function (_super) {\n    __extends(MDCCheckbox, _super);\n    function MDCCheckbox() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.rippleSurface = _this.createRipple();\n        return _this;\n    }\n    MDCCheckbox.attachTo = function (root) {\n        return new MDCCheckbox(root);\n    };\n    Object.defineProperty(MDCCheckbox.prototype, \"ripple\", {\n        get: function () {\n            return this.rippleSurface;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCCheckbox.prototype, \"checked\", {\n        get: function () {\n            return this.getNativeControl().checked;\n        },\n        set: function (checked) {\n            this.getNativeControl().checked = checked;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCCheckbox.prototype, \"indeterminate\", {\n        get: function () {\n            return this.getNativeControl().indeterminate;\n        },\n        set: function (indeterminate) {\n            this.getNativeControl().indeterminate = indeterminate;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCCheckbox.prototype, \"disabled\", {\n        get: function () {\n            return this.getNativeControl().disabled;\n        },\n        set: function (disabled) {\n            this.foundation.setDisabled(disabled);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCCheckbox.prototype, \"value\", {\n        get: function () {\n            return this.getNativeControl().value;\n        },\n        set: function (value) {\n            this.getNativeControl().value = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MDCCheckbox.prototype.initialize = function () {\n        var DATA_INDETERMINATE_ATTR = strings.DATA_INDETERMINATE_ATTR;\n        this.getNativeControl().indeterminate =\n            this.getNativeControl().getAttribute(DATA_INDETERMINATE_ATTR) ===\n                'true';\n        this.getNativeControl().removeAttribute(DATA_INDETERMINATE_ATTR);\n    };\n    MDCCheckbox.prototype.initialSyncWithDOM = function () {\n        var _this = this;\n        this.handleChange = function () {\n            _this.foundation.handleChange();\n        };\n        this.handleAnimationEnd = function () {\n            _this.foundation.handleAnimationEnd();\n        };\n        this.getNativeControl().addEventListener('change', this.handleChange);\n        this.listen(getCorrectEventName(window, 'animationend'), this.handleAnimationEnd);\n        this.installPropertyChangeHooks();\n    };\n    MDCCheckbox.prototype.destroy = function () {\n        this.rippleSurface.destroy();\n        this.getNativeControl().removeEventListener('change', this.handleChange);\n        this.unlisten(getCorrectEventName(window, 'animationend'), this.handleAnimationEnd);\n        this.uninstallPropertyChangeHooks();\n        _super.prototype.destroy.call(this);\n    };\n    MDCCheckbox.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        var adapter = {\n            addClass: function (className) { return _this.root.classList.add(className); },\n            forceLayout: function () { return _this.root.offsetWidth; },\n            hasNativeControl: function () { return !!_this.getNativeControl(); },\n            isAttachedToDOM: function () { return Boolean(_this.root.parentNode); },\n            isChecked: function () { return _this.checked; },\n            isIndeterminate: function () { return _this.indeterminate; },\n            removeClass: function (className) {\n                _this.root.classList.remove(className);\n            },\n            removeNativeControlAttr: function (attr) {\n                _this.getNativeControl().removeAttribute(attr);\n            },\n            setNativeControlAttr: function (attr, value) {\n                _this.getNativeControl().setAttribute(attr, value);\n            },\n            setNativeControlDisabled: function (disabled) {\n                _this.getNativeControl().disabled = disabled;\n            },\n        };\n        return new MDCCheckboxFoundation(adapter);\n    };\n    MDCCheckbox.prototype.createRipple = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        var adapter = __assign(__assign({}, MDCRipple.createAdapter(this)), { deregisterInteractionHandler: function (evtType, handler) {\n                _this.getNativeControl().removeEventListener(evtType, handler, applyPassive());\n            }, isSurfaceActive: function () { return matches(_this.getNativeControl(), ':active'); }, isUnbounded: function () { return true; }, registerInteractionHandler: function (evtType, handler) {\n                _this.getNativeControl().addEventListener(evtType, handler, applyPassive());\n            } });\n        return new MDCRipple(this.root, new MDCRippleFoundation(adapter));\n    };\n    MDCCheckbox.prototype.installPropertyChangeHooks = function () {\n        var e_1, _a;\n        var _this = this;\n        var nativeCb = this.getNativeControl();\n        var cbProto = Object.getPrototypeOf(nativeCb);\n        var _loop_1 = function (controlState) {\n            var desc = Object.getOwnPropertyDescriptor(cbProto, controlState);\n            // We have to check for this descriptor, since some browsers (Safari) don't support its return.\n            // See: https://bugs.webkit.org/show_bug.cgi?id=49739\n            if (!validDescriptor(desc)) {\n                return { value: void 0 };\n            }\n            // Type cast is needed for compatibility with Closure Compiler.\n            var nativeGetter = desc.get;\n            var nativeCbDesc = {\n                configurable: desc.configurable,\n                enumerable: desc.enumerable,\n                get: nativeGetter,\n                set: function (state) {\n                    desc.set.call(nativeCb, state);\n                    _this.foundation.handleChange();\n                },\n            };\n            Object.defineProperty(nativeCb, controlState, nativeCbDesc);\n        };\n        try {\n            for (var CB_PROTO_PROPS_1 = __values(CB_PROTO_PROPS), CB_PROTO_PROPS_1_1 = CB_PROTO_PROPS_1.next(); !CB_PROTO_PROPS_1_1.done; CB_PROTO_PROPS_1_1 = CB_PROTO_PROPS_1.next()) {\n                var controlState = CB_PROTO_PROPS_1_1.value;\n                var state_1 = _loop_1(controlState);\n                if (typeof state_1 === \"object\")\n                    return state_1.value;\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (CB_PROTO_PROPS_1_1 && !CB_PROTO_PROPS_1_1.done && (_a = CB_PROTO_PROPS_1.return)) _a.call(CB_PROTO_PROPS_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    MDCCheckbox.prototype.uninstallPropertyChangeHooks = function () {\n        var e_2, _a;\n        var nativeCb = this.getNativeControl();\n        var cbProto = Object.getPrototypeOf(nativeCb);\n        try {\n            for (var CB_PROTO_PROPS_2 = __values(CB_PROTO_PROPS), CB_PROTO_PROPS_2_1 = CB_PROTO_PROPS_2.next(); !CB_PROTO_PROPS_2_1.done; CB_PROTO_PROPS_2_1 = CB_PROTO_PROPS_2.next()) {\n                var controlState = CB_PROTO_PROPS_2_1.value;\n                var desc = Object.getOwnPropertyDescriptor(cbProto, controlState);\n                if (!validDescriptor(desc)) {\n                    return;\n                }\n                Object.defineProperty(nativeCb, controlState, desc);\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (CB_PROTO_PROPS_2_1 && !CB_PROTO_PROPS_2_1.done && (_a = CB_PROTO_PROPS_2.return)) _a.call(CB_PROTO_PROPS_2);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n    };\n    MDCCheckbox.prototype.getNativeControl = function () {\n        var NATIVE_CONTROL_SELECTOR = strings.NATIVE_CONTROL_SELECTOR;\n        var el = this.root.querySelector(NATIVE_CONTROL_SELECTOR);\n        if (!el) {\n            throw new Error(\"Checkbox component requires a \" + NATIVE_CONTROL_SELECTOR + \" element\");\n        }\n        return el;\n    };\n    return MDCCheckbox;\n}(MDCComponent));\nexport { MDCCheckbox };\nfunction validDescriptor(inputPropDesc) {\n    return !!inputPropDesc && typeof inputPropDesc.set === 'function';\n}\n//# sourceMappingURL=component.js.map"]},"metadata":{},"sourceType":"module"}