{"ast":null,"code":"import cloneDeep from \"lodash/cloneDeep\";\nexport function setCourses(nonHandledCourses) {\n  const courses_mount = cloneDeep(nonHandledCourses);\n  const all_areas = [];\n  const courses = {\n    name: [],\n    course: []\n  };\n  var course_id = 0;\n  console.log(\"hej baby\");\n\n  for (let i = 0; i < courses_mount.length; i++) {\n    var course = courses_mount[i];\n\n    if (!all_areas.includes(course.area)) {\n      all_areas.push(course.area);\n    }\n\n    if (!courses.name.includes(course.name)) {\n      course = fixCourseDatatypes(course);\n      course.id = course_id;\n      course_id++;\n      courses.name.push(course.name);\n      courses.course.push(course);\n      course.checked = false;\n    } else {\n      var index = courses.name.indexOf(course.name);\n\n      if (!courses.course[index].area.includes(course.area)) {\n        courses.course[index].area.push(course.area);\n      }\n\n      var dynamic_values = courses.course[index].dynamic_values;\n      var dyn_values = setDynamicValues(course);\n      courses.course[index].dynamic_values.push(dyn_values);\n      var dyn_val_unique = courses.course[index].dynamic_values.reduce((unique, o) => {\n        if (!unique.some(obj => obj.semester === o.semester && obj.block === o.block && obj.period === o.period)) {\n          unique.push(o);\n        }\n\n        return unique;\n      }, []);\n      courses.course[index].dynamic_values = dyn_val_unique;\n    }\n  }\n\n  return [courses, all_areas];\n}\n;\n\nfunction setDynamicValues(course) {\n  var dynamic_values = {\n    semester: course.semester,\n    block: course.block,\n    period: course.period,\n    checked_here: false\n  };\n  return dynamic_values;\n} // variable needs to be of type array for the ones below\n\n\nfunction fixCourseDatatypes(course) {\n  course.dynamic_values = [setDynamicValues(course)];\n  course.area = [course.area];\n  return course;\n}\n\nexport default setCourses;","map":{"version":3,"sources":["/home/daniel/Documents/Projects/masters_website/client/src/pages/functions/CourseSetter.js"],"names":["cloneDeep","setCourses","nonHandledCourses","courses_mount","all_areas","courses","name","course","course_id","console","log","i","length","includes","area","push","fixCourseDatatypes","id","checked","index","indexOf","dynamic_values","dyn_values","setDynamicValues","dyn_val_unique","reduce","unique","o","some","obj","semester","block","period","checked_here"],"mappings":"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","sourcesContent":["import cloneDeep from \"lodash/cloneDeep\";\n\nexport function setCourses(nonHandledCourses) {\n  const courses_mount = cloneDeep(nonHandledCourses);\n  const all_areas = [];\n  const courses = {\n    name: [],\n    course: [],\n  };\n\n  var course_id = 0;\n\n  console.log(\"hej baby\")\n\n  for (let i = 0; i < courses_mount.length; i++) {\n    var course = courses_mount[i];\n\n    if (!all_areas.includes(course.area)) {\n      all_areas.push(course.area);\n    }\n\n    if (!courses.name.includes(course.name)) {\n      course = fixCourseDatatypes(course);\n      course.id = course_id;\n      course_id++;\n      courses.name.push(course.name);\n      courses.course.push(course);\n      course.checked = false;\n    } else {\n      var index = courses.name.indexOf(course.name);\n\n      if (!courses.course[index].area.includes(course.area)) {\n        courses.course[index].area.push(course.area);\n      }\n\n      var dynamic_values = courses.course[index].dynamic_values;\n      var dyn_values = setDynamicValues(course);\n\n      courses.course[index].dynamic_values.push(dyn_values);\n\n      var dyn_val_unique = courses.course[index].dynamic_values.reduce(\n        (unique, o) => {\n          if (\n            !unique.some(\n              (obj) =>\n                obj.semester === o.semester &&\n                obj.block === o.block &&\n                obj.period === o.period\n            )\n          ) {\n            unique.push(o);\n          }\n          return unique;\n        },\n        []\n      );\n      courses.course[index].dynamic_values = dyn_val_unique;\n    }\n  }\n  return [courses, all_areas];\n};\n\n\n\nfunction setDynamicValues(course) {\n  var dynamic_values = {\n    semester: course.semester,\n    block: course.block,\n    period: course.period,\n    checked_here: false,\n  };\n  return dynamic_values;\n}\n\n// variable needs to be of type array for the ones below\nfunction fixCourseDatatypes(course) {\n  course.dynamic_values = [setDynamicValues(course)];\n  course.area = [course.area];\n  return course;\n}\n\nexport default setCourses;"]},"metadata":{},"sourceType":"module"}